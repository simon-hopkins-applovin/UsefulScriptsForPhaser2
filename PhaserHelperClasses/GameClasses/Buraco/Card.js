
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * Card.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Card(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var __visualParent = this.game.add.group(this);
	
	var __debugText = new webfontGEOText(this.game, -47.0, -80.0);
	__visualParent.add(__debugText);
	
	var __frontVisual = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__frontVisual.anchor.set(0.5, 0.5);
	
	var __backVisual = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__backVisual.anchor.set(0.5, 0.5);
	
	var __glow = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__glow.anchor.set(0.5, 0.5);
	
	
	
	// fields
	
	this.f_visualParent = __visualParent;
	this.f_debugText = __debugText;
	this.f_frontVisual = __frontVisual;
	this.f_backVisual = __backVisual;
	this.f_glow = __glow;
	
}

/** @type Phaser.Group */
var Card_proto = Object.create(Phaser.Group.prototype);
Card.prototype = Card_proto;
Card.prototype.constructor = Card;

/* --- end generated code --- */
// -- user code here --


Card.prototype.initialize = function(_number, _suit){
	
	this.number = _number;
	this.suit = _suit;
	var suitChar = '';
	switch(this.suit){
		case SUITS.HEARTS:
			suitChar = 'H';
			break;
		case SUITS.SPADES:
			suitChar = 'S';
			break;
		case SUITS.CLUBS:
			suitChar = 'C';
			break;
		case SUITS.DIAMONDS:
			suitChar = 'D';
			break;
		default:
			suitChar = 'H';
	};
	var textureKey = this.number.toString() + suitChar;
	if(this.game.cache.checkKey(Phaser.Cache.IMAGE, textureKey)){
		this.f_frontVisual.loadTexture(textureKey);
	}else{
		this.f_frontVisual.loadTexture("Blue Card Back");
	}
	
	this.f_debugText.setText(this.toString());
	this.isHidden = false;
	this.setHidden(this.isHidden);
	this.f_glow.alpha= 0;
	this.raised = false;
};

Card.prototype.showGlow = function(delay){
	if(this.glowTween){
		this.glowTween.stop();
	}
	this.glowTween = this.game.add.tween(this.f_glow).to({alpha: 1}, 300, Phaser.Easing.Linear.None, true, delay);
};

Card.prototype.hideGlow = function(){
	if(this.glowTween){
		this.glowTween.stop();
	}
	this.glowTween = this.game.add.tween(this.f_glow).to({alpha: 0}, 300, Phaser.Easing.Linear.None, true);
};

Card.prototype.raiseCard = function(delay){
	if(this.raised){
		return;
	}
	this.raised = true;
	if(this.f_visualParent.moveTween){
		this.f_visualParent.moveTween.stop();
	}
	this.f_visualParent.moveTween = this.game.add.tween(this.f_visualParent).to({y: "-50"}, 300, Phaser.Easing.Sinusoidal.InOut, true, delay);
};

Card.prototype.lowerCard = function(){
	if(!this.raised){
		return;
	}
	this.raised = false;
	if(this.f_visualParent.moveTween){
		this.f_visualParent.moveTween.stop();
	}
	this.f_visualParent.moveTween = this.game.add.tween(this.f_visualParent).to({y: 0}, 300, Phaser.Easing.Sinusoidal.InOut, true);
};

Card.prototype.clone = function(){
	
	var newCard = new Card(this.game);
	newCard.initialize(this.number, this.suit);
	return newCard;
};

Card.prototype.setHidden = function(isHidden){
	this.isHidden = isHidden;
	if(this.isHidden){
		this.f_backVisual.alpha = 1;
	}else{
		this.f_backVisual.alpha = 0;
	}
	return this;
};


Card.prototype.toString = function(){
	var numChar = Card.charFromNum(this.number);
	var suitChar = '';
	
	switch(this.suit){
		case SUITS.SPADES:
			suitChar = '♠';
			break;
		case SUITS.CLUBS:
			suitChar = '♣';
			break;
		case SUITS.HEARTS:
			suitChar = '♥';
			break;
		case SUITS.DIAMONDS:
			suitChar = '♦';
			break;
		default:
			suitChar = "?";
	};
	
	
	return numChar + suitChar;

};

Card.prototype.equals = function(_num, _suit){
	
	if(_num instanceof Card){
		_suit = _num.suit;
		_num = _num.number;
	}

	return this.number == _num && this.suit == _suit;
};

Card.prototype.setClickCallback = function(callback){
	this.f_frontVisual.events.onInputDown.removeAll();
	this.f_frontVisual.inputEnabled = true;
	this.f_frontVisual.events.onInputDown.add(callback.bind(this, this), this);
	
};

Card.prototype.flip = function(onComplete){
	if(!this.isHidden){
		if(onComplete){
			onComplete.call(this);
		}
		return;
	}
	this.game.add.sound("Card Flip").play();
	var flip1 = this.game.add.tween(this.f_visualParent.scale).to({x:0}, 100, Phaser.Easing.Linear.None, true);
	var flip2 = this.game.add.tween(this.f_visualParent.scale).to({x:1}, 100, Phaser.Easing.Linear.None, false);
	flip1.onComplete.add(function(){
		this.setHidden(false);
	}, this);
	flip2.onComplete.add(function(){
		if(onComplete){
			onComplete.call(this);
		}
	}, this);
	
	flip1.chain(flip2);
}
Card.prototype.disableInput = function(){
	this.f_frontVisual.inputEnabled = false;
};
Card.prototype.enableInput = function(){
	console.log('enabled');
	this.f_frontVisual.inputEnabled = true;
};



Card.numFromChar = function(char){
	switch(char){
		case 'J':
			return 11;
		case 'Q':
			return 12;
		case 'K':
			return 13;
		case 'A':
			return 14;
		default:
			return parseInt(char);
	};
};
Card.charFromNum = function(num){
	switch(num){
		case 11:
			return 'J';
		case 12:
			return 'Q';
		case 13:
			return 'K';
		case 14:
			return 'A';
		default:
			return num.toString();
	};
};

Card.enumFromChar = function(char){
	switch(char){
		case 'H':
			return SUITS.HEARTS;
		case 'S':
			return SUITS.SPADES;
		case 'D':
			return SUITS.DIAMONDS;
		case 'C':
			return SUITS.CLUBS;
		default:
			return 4;
	};
};













