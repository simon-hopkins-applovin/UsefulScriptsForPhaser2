
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * BNBBlock_Triangle.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function BNBBlock_Triangle(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var __visualParent = this.game.add.group(this);
	
	var __shadow = this.game.add.sprite(0.0, 5.0, 'square', null, __visualParent);
	__shadow.scale.set(0.0, 0.0);
	__shadow.anchor.set(0.5, 0.5);
	
	var __visual = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__visual.anchor.set(0.5, 0.5);
	
	var __flash = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__flash.scale.set(0.0, 0.0);
	__flash.anchor.set(0.5, 0.5);
	
	var __highlight = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__highlight.anchor.set(0.5, 0.5);
	
	var __anim = this.game.add.sprite(0.0, 25.0, 'square', null, __visualParent);
	__anim.scale.set(0.6, 0.6);
	__anim.anchor.set(0.5, 0.5);
	__anim.animations.add('destroy', [], 24, false);
	
	
	
	// fields
	
	this.f_visualParent = __visualParent;
	this.f_shadow = __shadow;
	this.f_visual = __visual;
	this.f_flash = __flash;
	this.f_highlight = __highlight;
	this.f_anim = __anim;
	
	this.afterCreate();
	
}

/** @type Phaser.Group */
var BNBBlock_Triangle_proto = Object.create(Phaser.Group.prototype);
BNBBlock_Triangle.prototype = BNBBlock_Triangle_proto;
BNBBlock_Triangle.prototype.constructor = BNBBlock_Triangle;

/* --- end generated code --- */
// -- user code here --


BNBBlock_Triangle.prototype = Object.create(BNBBlock.prototype);
BNBBlock_Triangle.prototype.constructor = BNBBlock_Triangle;

BNBBlock_Triangle.prototype.initialize = function(assocBoard, colliderBounds, visualBounds, colorData, particleQueue, angle){
	BNBBlock.prototype.initialize.call(this, assocBoard, colliderBounds, visualBounds, colorData, particleQueue);
	if(this.empty){
		return;
	}

	this.colliderAngle = angle==undefined?0:angle;
	var newCollider = new Phaser.Polygon(this.collider.topLeft, this.collider.bottomRight, this.collider.bottomLeft);
	newCollider.rotateAround(this.collider.centerX, this.collider.centerY, this.colliderAngle);
	newCollider.points.forEach(function(p){
		p.x = p.x<this.collider.centerX?this.collider.left:this.collider.right;
		p.y = p.y<this.collider.centerY?this.collider.top:this.collider.bottom;
	}, this);
	this.collider = newCollider;
	var dc = this.game.add.graphics(0,0);
	//this.add(dc);
	dc.beginFill(0xff0000);
	
	
	
	//dc.drawShape()
	//dc.drawShape(this.collider);
	//this.mask = dc;
};
// ◣: 0
// ◤: 90
// ◥ : 180
// ◢: 270
BNBBlock_Triangle.prototype.initColorVisuals = function(){
	
	this.healthText.setText(this.colliderAngle);
	var frames = [];
	console.log(this.colliderAngle);
	
	this.f_visual.tint = "0x" + Util.LightenDarkenColor(this.baseColor.toString(), this.game.rnd.realInRange(-30, 30));
	this.f_anim.tint = this.f_visual.tint;
	switch(this.colliderAngle){
		case 0:
			this.assocBoard.sandBlocks.push(this);
			this.f_visual.loadTexture("Sand Block White Triangle");
			this.f_highlight.loadTexture("Highlighted Triangle Block 2");
			this.f_visualParent.scale.x*=-1;
			frames = Phaser.Animation.generateFrameNames("Triangle Block 1 Melt (Grayscale)/Triangle Melt ", 1, 26, ".png");
			this.f_visualParent.x-=2;
			this.f_visualParent.y+=2;
			break;
		case 90:
			this.assocBoard.sandBlocks.push(this);
			this.f_visual.loadTexture("Sand Block White Triangle 2");
			this.f_highlight.loadTexture("Highlighted Triangle Block 1");
			frames = Phaser.Animation.generateFrameNames("Triangle Block 2 Melt (Grayscale)/Triangle Melt ", 1, 27, ".png");
			this.f_visualParent.x-=2;
			this.f_visualParent.y-=2;
			break;
		case 180:
			this.assocBoard.sandBlocks.push(this);
			this.f_visual.loadTexture("Sand Block White Triangle 2");
			this.f_highlight.loadTexture("Highlighted Triangle Block 1");
			this.f_visualParent.scale.x*=-1;
			this.f_visualParent.x+=2;
			this.f_visualParent.y-=2;
			frames = Phaser.Animation.generateFrameNames("Triangle Block 2 Melt (Grayscale)/Triangle Melt ", 1, 27, ".png");
			break;
		case 270:
			this.assocBoard.sandBlocks.push(this);
			this.f_visual.loadTexture("Sand Block White Triangle");
			this.f_highlight.loadTexture("Highlighted Triangle Block 2");
			frames = Phaser.Animation.generateFrameNames("Triangle Block 1 Melt (Grayscale)/Triangle Melt ", 1, 26, ".png");
			this.f_visualParent.x+=2;
			this.f_visualParent.y+=2;
			break;
		default:
			break;
	}
	this.f_visualParent.resizeWithWidth(this.visualBounds.width*2.6);
	this.f_anim.animations.add("destroy", frames, 24);
	this.f_anim.scale.multiply(Math.sign(this.f_visual.scale.x), Math.sign(this.f_visual.scale.y));
	this.f_anim.alpha = 0;
	//this.f_anim.play("destroy");
	
}


























